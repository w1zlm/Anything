#include <SFML/Graphics.hpp>
#include <iostream>

using namespace sf;

void drawGrid(sf::RenderWindow& win, int rows, int cols, sf::Color color, int offsetX = 0, int offsetY = 0) {
    offsetX = offsetX % int(win.getSize().x / rows);
    offsetY = offsetY % int(win.getSize().y / rows);

    // initialize values
    int numLines = rows + cols - 2;
    sf::VertexArray grid(sf::Lines, 2 * (numLines) + 4);
    win.setView(win.getDefaultView());
    auto size = win.getView().getSize();
    float rowH = size.y / rows;
    float colW = size.x / cols;

    // row separators
    for (int i = 0; i < rows - 1; i++) {
        int r = i + 1;
        float rowY = rowH * r;
        grid[i * 2].position = {0, rowY + offsetY};
        grid[i * 2 + 1].position = {size.x, rowY + offsetY};
    }

    // column separators
    for (int i = rows - 1; i < numLines; i++) {
        int c = i - rows + 2;
        float colX = colW * c;
        grid[i * 2].position = {colX + offsetX, 0};
        grid[i * 2 + 1].position = {colX + offsetX, size.y};
    }

    if (offsetX != 0) {
        int c = 0;
        float colX = colW * c;
        grid[2 * (numLines) + 0].position = { colX + offsetX, 0 };
        grid[2 * (numLines) + 1].position = { colX + offsetX, size.y };
    }

    if (offsetY != 0) {
        int r = -1;
        float rowY = rowH * r;
        grid[2 * (numLines) + 2].position = { 0, rowY + offsetY };
        grid[2 * (numLines) + 3].position = { size.x, rowY + offsetY };
    }

    // draw it
    win.draw(grid);
}

int main() {
    VideoMode screenSize = VideoMode::getDesktopMode();

	RenderWindow window(screenSize, "SFML works!", Style::None);

    float ab = 0;

	while (window.isOpen()) {
        ab++;
		Event event;

		while (window.pollEvent(event)) {
			if (event.type == Event::Closed) {
				window.close();
			}
		}

		window.clear();
        drawGrid(window, int(screenSize.height / 100), int(screenSize.width / 100), Color::White, std::sin(ab / 200) * 50, std::cos(ab / 200) * 50);
		window.display();
	}

	return 0;
}
